name: Update and Deploy

on:
  schedule:
    # 每10分钟执行一次
    - cron: "0 */2 * * *"
  push:
    # 只要代码有变动也触发（比如手动push）
    branches:
      - main

jobs:
  update-data:
    name: Update Data JSON
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4

      - name: Run update script
        run: python script/update-script.py

      - name: Check if data changed
        id: git-diff
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_NAME }}"

          # 检查和最新提交的差异
          if git diff --quiet HEAD -- data; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push if changed
        if: steps.git-diff.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add data/data.json data/info.json
          git commit -m "update: data.json, info.json"

          # 替换 origin URL
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

          # 可选：先拉一下避免冲突
          git pull --ff-only

          # 推送
          git push origin HEAD:main


  build-and-deploy:
    name: Build and Deploy Docker
    runs-on: ubuntu-latest
    needs: update-data

    # 只有当有文件变动或手动push才执行
    if: needs.update-data.outputs.changed == 'true' || github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set build date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            stellatezero/anime-live-data:latest
            stellatezero/anime-live-data:${{ steps.date.outputs.date }}

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Update server Docker container
        run: |
          sshpass -p "${{ secrets.SERVER_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_SSH_USER }}@${{ secrets.SERVER_SSH_HOST }} << 'EOF'
          cd /opt/anime-live-data
          docker compose pull
          docker compose up -d
          docker image prune -f
          EOF
